from pydantic import BaseModel, Field
from typing import Dict, Any, Optional, List
from datetime import datetime
from enum import Enum
import uuid


class TaskStatus(str, Enum):
    CONFIGURING = "configuring"
    PENDING = "pending"
    ACTIVE = "active"
    COMPLETE = "complete"
    PAUSED = "paused"
    FAILED = "failed"

    @classmethod
    def _missing_(cls, value: object):
        if isinstance(value, str):
            # Normalize to lowercase before lookup
            value = value.lower()
            for member in cls:
                if member.value == value:
                    return member
        return None


class Subtask(BaseModel):
    """Individual subtask in a research plan"""
    order: int
    description: str
    success_criteria: str
    status: str = "pending"  # pending, in_progress, completed
    findings: List[str] = Field(default_factory=list)


class ResearchPlan(BaseModel):
    """Research plan generated by the orchestrator"""
    restated_task: str
    subtasks: List[Subtask]
    current_subtask_index: int = 0
    created_at: int = Field(
        default_factory=lambda: int(datetime.now().timestamp() * 1000)
    )


class TaskMetrics(BaseModel):
    """Metrics for task execution"""
    searchCount: int = 0
    thinkCount: int = 0
    summaryCount: int = 0
    checkpointCount: int = 0
    webFetchCount: int = 0
    llmTokensUsed: int = 0
    errorCount: int = 0


class Task(BaseModel):
    """Main task model used across the system"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4())[:8])
    name: str
    description: str
    budgetMinutes: int = 180
    status: TaskStatus = TaskStatus.CONFIGURING
    progress: float = 0.0
    elapsed: int = 0
    metrics: TaskMetrics = Field(default_factory=TaskMetrics)
    research_plan: Optional[ResearchPlan] = None
    createdAt: int = Field(
        default_factory=lambda: int(datetime.now().timestamp() * 1000)
    )
    updatedAt: int = Field(
        default_factory=lambda: int(datetime.now().timestamp() * 1000)
    )
    config: Dict[str, Any] = Field(default_factory=dict)
